# -*- coding: utf-8 -*-
#!/usr/bin/python
__author__ = 'Weiliang Guo'

from py_spark_config import sc
import json
from flask import Flask, request
import algorithms
from flask import Blueprint
main = Blueprint('main', __name__)
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# https://spark.apache.org/docs/1.0.1/api/python/pyspark.context.SparkContext-class.html
def init_spark_context():
    # load spark context
    return sc



@main.route("deep_source/doc_classifier", methods=["GET"])
def doc_classifier(user_id, count):
    dc = algorithms.DocClassifier()
    dc_result = dc.run_naive_bayes()
    return json.dumps(dc_result)

@main.route("", methods=["POST"])
def add_ratings(user_id):
    # get the ratings from the Flask POST request object
    ratings_list = request.form.keys()[0].strip().split("\n")
    ratings_list = map(lambda x: x.split(","), ratings_list)
    # create a list with the format required by the negine (user_id, movie_id, rating)
    ratings = map(lambda x: (user_id, int(x[0]), float(x[1])), ratings_list)
    # add them to the model using then engine API
    recommendation_engine.add_ratings(ratings)

    return json.dumps(ratings)


def create_app(spark_context, dataset_path):
    global recommendation_engine
    app = Flask(__name__)
    app.register_blueprint(main)
    return app


if __name__ == "__main__":
    # init_spark_context()
    # doc_classifier()
    print("Spark Server successfully running")

